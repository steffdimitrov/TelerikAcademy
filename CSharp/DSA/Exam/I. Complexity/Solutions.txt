Problem 1 - O(n^2) - there are n outer cycles and n-1 inner cycles. In total:
n*(n-1)~n^2.

Problem 2 - worst and midle case O(n*m). Best case O(n).
If all elements are odd there will be two cycles outer n times and inner m times - n*m.
If half of the elements are odd there will be n outer cycles and m/2 inner - n*m/2 ~ n*m.
If all elements are even (best case) ther will be one cycle n times - O(n).

Problem 3 - O(n*m). There is one cycle m times. Then there are n recoursevly call to the same function.
Each call performes once m cycles. So in total m*n.