namespace HangMan.EngineAndRenderer
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using HangMan.Command;
    using HangMan.Interfaces;
    using HangMan.Messages;
    using HangMan.WordLoading;
    
    public class Engine
    {
        private const int MaxPlayersNumber = 5;

        /// <summary>
        /// Variable that's holding the only game instance 
        /// </summary>
        private static Engine instance;
        private static Random random = new Random();
        private static IList<string> words;

        private readonly WordsLoader wordsLoader;
        private readonly ScoreBoard scoreBoard;
        private readonly string resultsFileName = @"..\..\results.txt";
        private readonly GameCommandInvoker commandExecuter;
        private readonly IRenderer renderer;
        private string currentWord;
        private char[] playersWord;
        private bool cheated;
        private int mistakes;
        private int lettersLeft;

        private Engine()
        {
            this.renderer = new ConsoleRenderer();
            this.wordsLoader = new WordsLoader();
            this.wordsLoader.SetSource(new ListSource());
            words = this.wordsLoader.LoadWords();
            var greetinMsg = Message.GetMessage("greeting");
            this.renderer.WriteMessage(greetinMsg);
            this.InitGame();
            this.commandExecuter = new GameCommandInvoker();
            FileStorage storage = new FileStorage(MaxPlayersNumber, this.resultsFileName);
            this.scoreBoard = new ScoreBoard(storage);
        }

        /// <summary>
        /// Gets the only instance of this class. The getter is implementing the Singleton design pattern
        /// </summary>
        public static Engine Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new Engine();
                }

                return instance;
            }
        }

        public string CurrentWord
        {
            get
            {
                return this.currentWord;
            }

            set
            {
                this.currentWord = value;
            }
        }

        public char[] PlayerWord
        {
            get
            {
                return this.playersWord;
            }

            set
            {
                this.playersWord = value;
            }
        }

        public int Mistakes
        {
            get
            {
                return this.mistakes;
            }

            set
            {
                this.mistakes = value;
            }
        }

        /// <summary>
        /// Used to exit from the game
        /// </summary>
        public void QuitTheGame()
        {
            var goodbyeMsg = Message.GetMessage("goodbye");
            this.renderer.WriteMessage(goodbyeMsg);
            Environment.Exit(1);
        }

        /// <summary>
        /// Warns about an invalid command input
        /// </summary>
        public void InvalidCommandWarner()
        {
            var invalidMsg = Message.GetMessage("invalidCommand");
            this.renderer.WriteMessage(invalidMsg);
        }

        public string GenerateGreetingMessage()
        {
            var message = Message.GetMessage("greeting");
            return message;
        }
        /// <summary>
        /// Word obfuscator - replaces all letters by underscore '_'
        /// </summary>
        /// <param name="currentWord">The word, generated by the computer</param>
        /// <returns>An obfuscated word</returns>
        public char[] GenerateWordPlaceholder(string currentWord)
        {
            char[] generatedPlaceholder = new char[currentWord.Length];
            for (int i = 0; i < generatedPlaceholder.Length; i++)
            {
                generatedPlaceholder[i] = '_';
            }

            return generatedPlaceholder;
        }

        public string PrintWord()
        {
            string message = this.GeneratePlayersWordFormatedString();
            this.renderer.WriteMessage(message);
            return message;
        }
        /// <summary>
        /// Opens the next letter from the word. When called, the player won't be able to save his name
        /// </summary>
        public void Help()
        {
            int toBeRevealed = Array.IndexOf(this.playersWord, '_');
            this.playersWord[toBeRevealed] = this.currentWord[toBeRevealed];
            this.cheated = true;
            this.lettersLeft -= 1;
        }

        // TODO : Write unit test for the guess method
        public int Guess(char letter)
        {
            int guessed = 0;
            for (int i = 0; i < this.currentWord.Length; i++)
            {
                if (this.currentWord[i] == letter && this.playersWord[i] == '_')
                {
                    guessed++;
                    this.playersWord[i] = letter;
                }
            }

            if (guessed > 0)
            {
                this.lettersLeft = this.lettersLeft - guessed;
                var guessedMsg = Message.GetMessage("guessed");
                var messageToPrint = string.Format(guessedMsg, guessed);
                this.renderer.WriteMessage(messageToPrint);
            }
            else
            {
                var letterNotFoungMsg = Message.GetMessage("notFound");
                this.renderer.WriteMessage(letterNotFoungMsg);
                this.mistakes++;
            }

            return guessed;
        }

        public void End()
        {
            var congratsMessage = Message.GetMessage("congratulations");
            this.renderer.WriteMessage(congratsMessage);

            if (this.cheated == false)
            {
                var congratsScoreBoardMessage = Message.GetMessage("congratulationsScoreBoard");
                this.renderer.WriteMessage(congratsScoreBoardMessage);
                string playerName = Console.ReadLine();
                PlayerRecord record = new PlayerRecord(playerName, this.mistakes.ToString());
                this.scoreBoard.AddResult(record);
            }
            else
            {
                var cheatedMsg = Message.GetMessage("cheated");
                this.renderer.WriteMessage(cheatedMsg);
            }
        }

        public void ShowScoreboard()
        {
            this.renderer.WriteEmptyLine();
            IEnumerable<IRecord> result = this.scoreBoard.GetAll();
            int counter = 1;
            foreach (var item in result)
            {
                this.renderer.WriteMessage(counter + "--> " + item.ToString());
                counter++;
            }

            this.renderer.WriteEmptyLine();
        }

        public IDictionary<string, string> GetGameState()
        {
            var data = new Dictionary<string, string>()
            {
                { "word", this.currentWord },
                { "playersWord", this.playersWord.ToString() },
                { "mistakes", this.Mistakes.ToString() }
            };

            return data;
        }

        /// <summary>
        /// Game Loop - while the player hasn't stopped the game, the game loop will read it's input and provid him with adequate output
        /// </summary>
        public void GameLoop()
        {
            while (true)
            {
                this.PrintWord();
                var promptMsg = Message.GetMessage("promptForCommand");
                this.renderer.WriteMessage(promptMsg);

                // TODO: Implement a input reader interface;
                string input = Console.ReadLine();
                this.commandExecuter.ExecuteCommand(input);
            }
        }
        
        public void CheckIfMustEndGame()
        {
            if (this.lettersLeft == 0)
            {
                this.End();
                this.Restart();
            }
        }

        public void Restart()
        {
            this.InitGame();
        }

        private string GenerateRandomWord()
        {
            int wordNumber = random.Next(0, 10);
            return words[wordNumber];
        }

        private void InitGame()
        {
            this.currentWord = this.GenerateRandomWord();
            this.playersWord = this.GenerateWordPlaceholder(this.CurrentWord);
            this.cheated = false;
            this.mistakes = 0;
            this.lettersLeft = this.playersWord.Length;
            var rulesMsg = Message.GetMessage("howToPlay");
            this.renderer.WriteMessage(rulesMsg);
        }

        private string GeneratePlayersWordFormatedString()
        {
            var sb = new StringBuilder();
            sb.AppendLine();
            sb.Append("The secret word is:");
            foreach (var letter in this.playersWord)
            {
                sb.Append(letter);
                sb.Append(" ");
            }

            sb.AppendLine();
            return sb.ToString();
        }
    }
}